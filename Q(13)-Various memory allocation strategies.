#include <stdio.h>
#include <stdlib.h>
#define MEMORY_SIZE 100
typedef struct {
    int process_id;
    int size;
} Process;
void initializeMemory();
void displayMemory();
void firstFit(Process *process);
void bestFit(Process *process);
void worstFit(Process *process);
int memory[MEMORY_SIZE];
int main() {
    initializeMemory();
    Process processes[] = {
        {1, 200},
        {2, 300},
        {3, 150},
        {4, 400},
    };
    printf("Initial Memory State:\n");
    displayMemory();
    for (int i = 0; i < sizeof(processes) / sizeof(processes[0]); i++) {
        printf("\nAllocating Process %d\n", processes[i].process_id);
        worstFit(&processes[i]);
        displayMemory();
    }
    return 0;
}
void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1;
    }
}
void displayMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) {
            printf("-");
        } else {
            printf("%d", memory[i]);
        }
    }
    printf("\n");
}
void firstFit(Process *process) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1 && i + process->size <= MEMORY_SIZE) {
            for (int j = 0; j < process->size; j++) {
                memory[i + j] = process->process_id;
            }
            return;
        }
    }
    printf("Cannot allocate Process %d using First Fit.\n", process->process_id);
}
void bestFit(Process *process) {
    int bestFitStart = -1;
    int bestFitSize = MEMORY_SIZE + 1;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        int blockSize = 0;
        while (i < MEMORY_SIZE && memory[i] == -1) {
            blockSize++;
            i++;
        }
        if (blockSize >= process->size && blockSize < bestFitSize) {
            bestFitSize = blockSize;
            bestFitStart = i - blockSize;
        }
    }
    if (bestFitStart != -1) {
        for (int i = bestFitStart; i < bestFitStart + process->size; i++) {
            memory[i] = process->process_id;
        }
    } else {
        printf("Cannot allocate Process %d using Best Fit.\n", process->process_id);
    }
}
void worstFit(Process *process) {
    int worstFitStart = -1;
    int worstFitSize = 0;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        int blockSize = 0;
        while (i < MEMORY_SIZE && memory[i] == -1) {
            blockSize++;
            i++;
        }
        if (blockSize >= process->size && blockSize > worstFitSize) {
            worstFitSize = blockSize;
            worstFitStart = i - blockSize;
        }
    }
    if (worstFitStart != -1) {
        for (int i = worstFitStart; i < worstFitStart + process->size; i++) {
            memory[i] = process->process_id;
        }
    } else {
        printf("Cannot allocate Process %d using Worst Fit.\n", process->process_id);
    }
}
