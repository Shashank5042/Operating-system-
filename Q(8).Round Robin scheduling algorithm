#include <stdio.h>
#define MAX_PROCESSES 10
#define TIME_QUANTUM 2
typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[MAX_PROCESSES];
    printf("Enter process details:\n");
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    int time = 0;
    printf("\nGantt Chart:\n");
    while (1) {
        int all_processes_complete = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                all_processes_complete = 0;
                int execute_time = (processes[i].remaining_time < TIME_QUANTUM) ? processes[i].remaining_time : TIME_QUANTUM;
                processes[i].remaining_time -= execute_time;
                printf("P%d(%d) ", processes[i].process_id, execute_time);
                time += execute_time;
                if (processes[i].remaining_time == 0) {
                    processes[i].completion_time = time;
                    processes[i].turnaround_time = processes[i].completion_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
                }
            }
        }
        if (all_processes_complete) {
            break;
        }
    }
    printf("\n\nProcess\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }
    return 0;
}
