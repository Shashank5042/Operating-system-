#include <stdio.h>
#define MAX_PROCESSES 10
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}
void sortProcessesByBurstTime(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[MAX_PROCESSES];
    printf("Enter process details:\n");
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
    }
    sortProcessesByBurstTime(processes, n);
    int time = 0;
    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        if (time < processes[i].arrival_time) {
            while (time < processes[i].arrival_time) {
                printf("IDLE ");
                time++;
            }
        }
        printf("P%d ", processes[i].process_id);
        processes[i].completion_time = time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        time += processes[i].burst_time;
    }
    printf("\n\nProcess\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }
    return 0;
}
