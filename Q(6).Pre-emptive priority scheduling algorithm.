#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
} Process;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcesses(Process processes[], int n) {
        for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority < processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[MAX_PROCESSES];

    printf("Enter process details:\n");
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    int time = 0;
    int total_burst_time = 0;

    for (int i = 0; i < n; i++) {
        total_burst_time += processes[i].burst_time;
    }

    printf("\nGantt Chart:\n");

    while (time < total_burst_time) {
        sortProcesses(processes, n);

        int highest_priority_index = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0) {
                highest_priority_index = i;
                break;
            }
        }

        if (highest_priority_index == -1) {
            printf("IDLE ");
            time++;
        } else {
            printf("P%d ", processes[highest_priority_index].process_id);
            processes[highest_priority_index].remaining_time--;
            time++;
        }
    }

    printf("\n");

    return 0;
}
